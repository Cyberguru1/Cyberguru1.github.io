#!/usr/bin/env python

import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import re
from Crypto.Hash import MD5


def decrypt(cipher, key):
    """_summary_

    Args:
        cipher (_type_): _description_
        key (_type_): _description_

    Returns:
        _type_: _description_
    """
    cipher_text = base64.b64decode(cipher+"==")

    cipher = AES.new(key, AES.MODE_CBC, iv=cipher_text[:16])

    decrypt_d = cipher.decrypt(cipher_text[16:])

    return decrypt_d


cipher_text = "G38zckAufW4B9A6sywz28kzgW8CCx1UWugLUTjKlo/kwV1CVesmr0tPX/JZOW0aik0TlkrcAIZZ/G0BigUtmeg"


for i in range(0, 10000):
        
    key = str(i).zfill(4)
    key1 = "<=== P3nt3st3rL4b ===>" + key
    md5_hash = MD5.new()
    md5_hash.update(key1.encode())
    md5_hash = md5_hash.digest()[0:16]

    try:
        text = decrypt(cipher_text, md5_hash[:16])
        pattern = r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        pattern1 = re.compile('.*-.*-.*-.*')
    
        if re.match(pattern1, str(text.decode('utf-8'))):
            print("Match found: True")
            print(str(text.decode()))
            break
       
    except:
        print(f"failed, {i}")
        pass
    

